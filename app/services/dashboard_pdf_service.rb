class DashboardPdfService
  include DashboardHelper
  include ActionView::Helpers::DateHelper

  def initialize(export_data, project = nil, language = nil)
    @export_data = export_data
    @project = project
    @language = language || I18n.locale
  end

  def generate
    pdf = Redmine::Export::PDF::ITCPDF.new(@language)
    pdf.SetTitle("Dashboard Report - #{@export_data[:project]}")
    pdf.AddPage

    header(pdf)
    executive_summary(pdf)
    issues_by_status(pdf)
    time_tracking(pdf)
    recent_issues(pdf)
    recent_activities(pdf)
    footer(pdf)

    pdf.output
  end

  private

  def header(pdf)
    pdf.SetFontStyle('B', 16)
    pdf.Cell(0, 10, "Dashboard Report", 0, 1, 'C')
    pdf.SetFontStyle('', 10)
    pdf.Cell(0, 6, "Project: #{@export_data[:project]}", 0, 1, 'C')
    pdf.Cell(0, 6, "Generated: #{@export_data[:generated_at].strftime('%B %d, %Y %I:%M %p')}", 0, 1, 'C')
    pdf.Ln(10)
  end

  def executive_summary(pdf)
    pdf.SetFontStyle('B', 12)
    pdf.Cell(0, 8, "Executive Summary", 0, 1, 'L')
    pdf.SetFontStyle('', 10)

    summary_data = [
      ["Total Issues", @export_data[:summary][:total_issues]],
      ["Open Issues", @export_data[:summary][:open_issues]],
      ["Closed Issues", @export_data[:summary][:closed_issues]],
      ["Completion Rate", "#{@export_data[:summary][:completion_rate].round(1)} %"],
      ["Overdue Issues", @export_data[:summary][:overdue_issues]],
      ["Total Time Logged", format_time_duration(@export_data[:summary][:total_time])],
      ["Active Users", @export_data[:summary][:active_users]]
    ]

    summary_data.each do |label, value|
      pdf.SetFontStyle('B', 10)
      pdf.Cell(60, 6, "#{label}:", 1, 0, 'L')
      pdf.SetFontStyle('', 10)
      pdf.Cell(0, 6, value.to_s, 1, 1, 'L')
    end
    pdf.Ln(5)
  end

  def issues_by_status(pdf)
    pdf.SetFontStyle('B', 12)
    pdf.Cell(0, 8, "Issues by Status", 0, 1, 'L')
    pdf.SetFontStyle('', 10)
    @export_data[:charts][:issues_by_status].each do |status, count|
      pdf.Cell(60, 6, status, 1, 0, 'L')
      pdf.Cell(0, 6, count.to_s, 1, 1, 'L')
    end
    pdf.Ln(5)
  end

  def time_tracking(pdf)
    pdf.SetFontStyle('B', 12)
    pdf.Cell(0, 8, "Time Tracking", 0, 1, 'L')
    pdf.SetFontStyle('', 10)
    @export_data[:charts][:time_by_activity].each do |activity, hours|
      pdf.Cell(60, 6, activity, 1, 0, 'L')
      pdf.Cell(0, 6, format_time_duration(hours), 1, 1, 'L')
    end
    pdf.Ln(5)
  end

  def recent_issues(pdf)
    pdf.SetFontStyle('B', 12)
    pdf.Cell(0, 8, "Recent Issues", 0, 1, 'L')
    pdf.SetFontStyle('', 10)
    @export_data[:recent_data][:recent_issues].each do |issue|
      pdf.MultiCell(0, 6, 
        "##{issue[:id]} - #{issue[:subject]}\nStatus: #{issue[:status]} | Assignee: #{issue[:assignee] || 'Unassigned'} | Updated: #{issue[:updated_on].strftime('%m/%d/%Y')}", 
        1, 'L'
      )
    end
    pdf.Ln(5)
  end

  def recent_activities(pdf)
    pdf.SetFontStyle('B', 12)
    pdf.Cell(0, 8, "Recent Activities", 0, 1, 'L')
    pdf.SetFontStyle('', 10)
    @export_data[:recent_data][:recent_activities].each do |activity|
      pdf.MultiCell(0, 6,
        "#{activity[:description]} (by #{activity[:user]}, #{time_ago_in_words(activity[:date])} ago)",
        1, 'L'
      )
    end
  end

  def footer(pdf)
    # Temporarily disable auto page break
    pdf.SetAutoPageBreak(false, 0)
    
    pdf.SetY(-15) # 15mm from bottom
    pdf.SetFontStyle('I', 8)
    pdf.Cell(0, 10, "Generated by Redmine Dashboard Plugin | #{Date.current.year}", 0, 0, 'C')
    
    # Restore auto page break to default
    pdf.SetAutoPageBreak(true, 10)
  end
end